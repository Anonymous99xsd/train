/* eslint-disable react-hooks/exhaustive-deps */
import React, { useState, useEffect, useRef } from 'react';
import './index.css'
import { connect } from 'dva'
import { Modal, message, notification } from 'antd'
import 'antd/dist/antd.css';

const mapStateToProps = state => {
    // console.log('float', state);
    return {
        shopCart: state.cart.shopCart,
        isEject: state.cart.isEject
    }
}

function Float(props) {
    const { dispatch, isEject, shopCart } = props
    // Â≠òÂÇ®ÂïÜÂìÅÊï∞Èáè
    const [quantity, setQuantity] = useState(0)
    // ÊÄª‰ª∑
    const [totalPrice, setTotalPrice] = useState(0)
    const [isModalVisible, setIsModalVisible] = useState(false);

    // ÊåâÈíÆÂÆû‰æã
    const boxRef = useRef()
    const ctlRef = useRef()
    const quantityRef = useRef()
    const openRef = useRef()
    const delRef = useRef()

    // Ë≠¶ÂëäÊèêÁ§∫
    const openNotificationWithIcon = type => {
        notification[type]({
          message: 'Ë¥≠Áâ©ËΩ¶ÊòØÁ©∫ÁöÑ',
          description: '‰Ω†ÈúÄË¶ÅÊ∑ªÂä†‰∏Ä‰∫õÂïÜÂìÅÂà∞Ë¥≠Áâ©ËΩ¶',
        });
      };

    // ÊâìÂºÄË¥≠Áâ©ËΩ¶
    const openFloat = () => {
        // console.log('openFloat', isEject);
        dispatch({type: 'cart/openShop'})
        boxRef.current.classList.add('float-open')
        ctlRef.current.style.display = 'none'
        openRef.current.style.display = 'inline-block'
    }

    // ÂÖ≥Èó≠Ë¥≠Áâ©ËΩ¶
    const closeFloat = () => {
        // console.log('closeFloat', isEject);
        dispatch({ type: 'cart/closeShop' })
        boxRef.current.classList.remove('float-open')
        openRef.current.style.display = 'none'
        ctlRef.current.style.display = 'inline-block'
    }

    // Âà†Èô§Ë¥≠Áâ©ËΩ¶‰∏≠ÁöÑÂïÜÂìÅ
    const deleteCart = (id) => {
        dispatch({
            type: 'cart/deleteCart',
            payload: id
        })
    }

    // ÂêàËÆ°ÂàÜÊúü
    const totalInstallment = (totalPrice) => {
        if (totalPrice - 0 === 0) return null
        return (
            <span style={{fontSize:'16px'}}>OR UP TO 9 x $ {(totalPrice / 9).toFixed(2)}</span>
        )
    }

    // ÂáèÂ∞ë‰∏Ä‰∏™ÂïÜÂìÅ
    const subtrack = (id) => {
        dispatch({
            type: 'cart/subtrackGood',
            payload: id
        })
    }

    // Â¢ûÂä†‰∏Ä‰∏™ÂïÜÂìÅ
    const add = (id) => {
        dispatch({
            type: 'cart/addOneGood',
            payload: id
        })
    }

    // Ê∏ÖÁ©∫Ë¥≠Áâ©ËΩ¶
    const clearAllGoods = () => {
        if (!shopCart.length) {
            openNotificationWithIcon('warning')
            return
        }
        setIsModalVisible(true);
    }

    // ÁªëÂÆöÁßªÂÖ•ÁßªÂá∫‰∫ã‰ª∂
    useEffect(() => {
        let cross = document.querySelectorAll('.float-item-del')
        if (cross.length) {
            for (let item of cross) {
                item.addEventListener('mouseenter', function(e) {
                    e.target.parentNode.style.backgroundColor = '#0c0b10'
                    e.target.parentNode.childNodes[3].childNodes[0].style.textDecoration = 'line-through'
                    e.target.parentNode.childNodes[3].childNodes[1].style.textDecoration = 'line-through'
                    e.target.parentNode.childNodes[4].childNodes[0].style.textDecoration = 'line-through'
                    e.target.style.color = '#fff'
                })
                item.addEventListener('mouseleave', function(e) {
                    e.target.parentNode.style.backgroundColor = '#1b1a20'
                    e.target.parentNode.childNodes[3].childNodes[0].style.textDecoration = 'none'
                    e.target.parentNode.childNodes[3].childNodes[1].style.textDecoration = 'none'
                    e.target.parentNode.childNodes[4].childNodes[0].style.textDecoration = 'none'
                    e.target.style.color = '#000'
                })
            }
        }
    }, [props])

    // ËÆ°ÁÆóÂ±ûÊÄß
    useEffect(() => {
        // Êï∞Èáè
        let num = (shopCart || []).reduce((pre, cur) => {
            return pre + cur.quantity
        }, 0)
        setQuantity(num)
        // ÊÄª‰ª∑
        let total = (shopCart || []).reduce((pre, cur) => {
            return pre + cur.quantity * cur.price
        }, 0)
        setTotalPrice(total.toFixed(2))
    }, [props])

    // ÂºπÂá∫Ë¥≠Áâ©ËΩ¶
    useEffect(() => {
        if (isEject) openFloat()
        else closeFloat()
    }, [props.isEject])

    // ÂÇ®Â≠òË¥≠Áâ©ËΩ¶Êï∞ÊçÆ
    const [init, setInit] = useState(false)
    useEffect(() => {
        if (!init) {
            setInit(true)
        } else {
            localStorage.setItem('shopCart', JSON.stringify(props.shopCart))
        }
    }, [props.shopCart])

    const handleOk = () => {
        setIsModalVisible(false);
        message.success('Ë¥≠‰π∞ÊàêÂäü')
        dispatch({
            type: 'cart/clearShopCart'
        })
    };

    const handleCancel = () => {
        setIsModalVisible(false);
    };

    return (
        <div ref={boxRef} className="float-cart">
            <span onClick={() => openFloat()} ref={ctlRef} className="float-control float-control-close">
                <span ref={quantityRef} className="cart-quantity">{quantity}</span>
            </span>
            <div onClick={() => closeFloat()} ref={openRef} className="float-control float-control-open">√ó</div>
            <div className="float-container">
                <div className="float-header">
                    <span className="float-bag">
                        <span className="cart-quantity offset">{quantity}</span>
                    </span>
                    <span className="header-title">Ë¥≠Áâ©ËΩ¶</span>
                </div>
                <div className="float-content">
                    {
                        (!shopCart?.length && <p>Ë¥≠Áâ©ËΩ¶ÊòØÁ©∫ÁöÑ<br />üöö</p>) || shopCart.map((v, i) => {
                            return (
                                <div key={v.id} className="float-item">
                                    <i ref={delRef} onClick={() => deleteCart(v.id)} className="float-item-del fas fa-times"></i>
                                    <div></div>
                                    <div className="float-item-image">
                                        <img src={require(`../../assets/${v.id}.jpg`)} alt="" />
                                    </div>
                                    <div className="float-item-details">
                                        <p className="float-item-title">{v.title}</p>
                                        <p className="float-item-content">
                                            {v.availableSizes[0]} | {v.style}
                                            <br />
                                            Quantity: {v.quantity}
                                        </p>
                                    </div>
                                    <div className="float-item-price">
                                        <p>$ {parseFloat(v.price + (v.price.toString().split('.')[1] === undefined ? '.00' : '00' )).toFixed(2)}</p>
                                        <div>
                                            <button onClick={() => subtrack(v.id)} disabled={v.quantity === 1 ? 'disbaled' : ''} className="subtrack">-</button>
                                            <button onClick={() => add(v.id)} className="add">+</button>
                                        </div>
                                    </div>
                                </div>
                            )
                        })
                    }
                </div>
                <div className="float-footer">
                    <div className="subtotal">ÂêàËÆ°</div>
                    <div className="sub-price">
                        <p className="sub-val">$ {totalPrice}</p>
                        <small className="sub-installment">
                            {totalInstallment(totalPrice)}
                        </small>
                    </div>
                    <div onClick={clearAllGoods} className="bought">ÊîØ‰ªò</div>
                    <Modal title="ÊèêÁ§∫" okText="Á°ÆËÆ§Êèê‰∫§" cancelText="ÊàëÂÜçÊÉ≥ÊÉ≥" visible={isModalVisible} onOk={handleOk} onCancel={handleCancel}>
                        <p>ÂÖ±ËÆ° {totalPrice} ÁæéÂÖÉ</p>
                    </Modal>
                </div>
            </div>
        </div>
    )
}

export default connect(mapStateToProps)(Float)